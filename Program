using System;
using System.Collections.Generic;
using System.Linq;

class Program
{
    static List<Contact> contacts = new List<Contact>();

    static void Main()
    {
        Console.WriteLine("Enter the number of action and press [Enter]. Then follow instructions.");

        while (true)
        {
            DisplayMenu();
            int choice = GetMenuChoice();

            switch (choice)
            {
                case 1:
                    ViewAllContacts();
                    break;
                case 2:
                    SearchContacts();
                    break;
                case 3:
                    AddNewContact();
                    break;
                case 4:
                    Console.WriteLine("Exiting the program. Goodbye!");
                    return;
                default:
                    Console.WriteLine("Invalid choice. Please enter a valid menu number.");
                    break;
            }
        }
    }

    static void DisplayMenu()
    {
        Console.WriteLine("Menu:");
        Console.WriteLine("1. View all contacts");
        Console.WriteLine("2. Search");
        Console.WriteLine("3. New contact");
        Console.WriteLine("4. Exit");
    }

    static int GetMenuChoice()
    {
        Console.Write("> ");
        return int.Parse(Console.ReadLine());
    }

    static void ViewAllContacts()
    {
        Console.WriteLine("All contacts:");
        foreach (var contact in contacts)
        {
            Console.WriteLine(contact.ToString());
        }
    }

    static void SearchContacts()
    {
        Console.WriteLine("Search by");
        Console.WriteLine("1. Name");
        Console.WriteLine("2. Surname");
        Console.WriteLine("3. Name and Surname");
        Console.WriteLine("4. Phone");
        Console.WriteLine("5. E-mail");

        Console.Write("> ");
        int searchChoice = int.Parse(Console.ReadLine());

        Console.Write("Request: ");
        string searchTerm = Console.ReadLine();

        Console.WriteLine("Searching...");

        List<Contact> searchResults = new List<Contact>();

        switch (searchChoice)
        {
            case 1:
                searchResults = contacts.Where(c => c.Name.Contains(searchTerm)).ToList();
                break;
            case 2:
                searchResults = contacts.Where(c => c.Surname.Contains(searchTerm)).ToList();
                break;
            case 3:
                searchResults = contacts.Where(c => (c.Name + " " + c.Surname).Contains(searchTerm)).ToList();
                break;
            case 4:
                searchResults = contacts.Where(c => c.Phone.Contains(searchTerm)).ToList();
                break;
            case 5:
                searchResults = contacts.Where(c => c.Email.Contains(searchTerm)).ToList();
                break;
            default:
                Console.WriteLine("Invalid search choice.");
                return;
        }

        Console.WriteLine($"Results ({searchResults.Count}):");
        foreach (var result in searchResults)
        {
            Console.WriteLine(result.ToString());
        }
    }

    static void AddNewContact()
    {
        Console.WriteLine("New contact");
        Console.Write("Name: ");
        string name = Console.ReadLine();

        Console.Write("Surname: ");
        string surname = Console.ReadLine();

        string phone;
        do
        {
            Console.Write("Phone: ");
            phone = Console.ReadLine();

            if (!IsPhoneNumberValid(phone))
            {
                Console.WriteLine("Invalid phone number. Please enter a valid phone number with only digits.");
            }
        } while (!IsPhoneNumberValid(phone));

        Console.Write("E-mail: ");
        string email = Console.ReadLine();

        Contact newContact = new Contact { Name = name, Surname = surname, Phone = phone, Email = email };
        contacts.Add(newContact);

        Console.WriteLine("Contact created.");
    }

    static bool IsPhoneNumberValid(string phoneNumber)
    {
        return phoneNumber.All(char.IsDigit);
    }

    class Contact
    {
        public string Name { get; set; }
        public string Surname { get; set; }
        public string Phone { get; set; }
        public string Email { get; set; }

        public override string ToString()
        {
            return $"Name: {Name}\nSurname: {Surname}\nPhone: {Phone}\nE-mail: {Email}\n";
        }
    }
}
